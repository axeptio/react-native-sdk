name: Release Dry Run

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test (leave empty for current package.json version)'
        required: false
        type: string

permissions:
  contents: read

jobs:
  release-dry-run:
    name: Dry-Run Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup
        uses: ./.github/actions/setup

      - name: Determine version
        id: version
        run: |
          if [[ -n "${{ inputs.version }}" ]]; then
            VERSION="${{ inputs.version }}"
            echo "üìù Testing with input version: $VERSION"
          else
            VERSION=$(node -p "require('./package.json').version")
            echo "üìù Testing with package.json version: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check current state
        run: |
          echo "## üìä Current State"
          echo ""
          CURRENT=$(node -p "require('./package.json').version")
          echo "üì¶ Package.json version: $CURRENT"
          echo "üéØ Target version: ${{ steps.version.outputs.version }}"
          echo ""
          
          # Check latest git tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          echo "üè∑Ô∏è  Latest git tag: $LATEST_TAG"
          echo ""
          
          # Check if target version tag exists
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è  Tag v${{ steps.version.outputs.version }} already exists in git"
          else
            echo "‚úÖ Tag v${{ steps.version.outputs.version }} does not exist yet"
          fi

      - name: Check if version exists on npm
        run: |
          echo "## üîç NPM Registry Check"
          echo ""
          PACKAGE_NAME="@axeptio/react-native-sdk"
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "Checking if $PACKAGE_NAME@$VERSION exists on npm..."
          echo ""
          
          if npm view "$PACKAGE_NAME@$VERSION" version 2>/dev/null; then
            echo "‚ùå **ERROR**: Version $VERSION already exists on npm!"
            echo ""
            echo "This release would fail because the version is already published."
            echo "You need to bump the version number before releasing."
            echo ""
            echo "Current published versions:"
            npm view "$PACKAGE_NAME" versions --json | tail -5
            exit 1
          else
            echo "‚úÖ **OK**: Version $VERSION is not yet published to npm"
            echo "This version can be published."
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Validate package.json
        run: |
          echo "## üìã Package Validation"
          echo ""
          
          # Check required fields
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_MAIN=$(node -p "require('./package.json').main")
          
          echo "‚úì Name: $PACKAGE_NAME"
          echo "‚úì Version: $PACKAGE_VERSION"
          echo "‚úì Main: $PACKAGE_MAIN"
          
          # Check if all required files exist
          echo ""
          echo "Checking required files..."
          if [[ -f "README.md" ]]; then
            echo "‚úì README.md exists"
          else
            echo "‚ö†Ô∏è  WARNING: README.md not found"
          fi
          
          if [[ -f "LICENSE" ]]; then
            echo "‚úì LICENSE exists"
          else
            echo "‚ö†Ô∏è  WARNING: LICENSE not found"
          fi

      - name: Build package
        run: |
          echo "## üî® Build Test"
          echo ""
          echo "Running build..."
          npm run prepare
          echo ""
          echo "‚úÖ Build completed successfully"

      - name: Dry run npm publish
        run: |
          echo "## üì¶ NPM Publish Dry Run"
          echo ""
          echo "Simulating npm publish..."
          npm publish --dry-run --access public 2>&1 | tee publish-output.txt
          echo ""
          
          # Check package size
          SIZE=$(cat publish-output.txt | grep "package size:" | cut -d: -f2 | xargs)
          UNPACKED=$(cat publish-output.txt | grep "unpacked size:" | cut -d: -f2 | xargs)
          
          if [[ -n "$SIZE" ]]; then
            echo "üìä Package size: $SIZE"
            echo "üìä Unpacked size: $UNPACKED"
          fi
          
          echo ""
          echo "‚úÖ Dry run completed successfully"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Release simulation summary
        run: |
          echo "## üé¨ Release Simulation Summary"
          echo ""
          echo "### What would happen if you release now:"
          echo ""
          echo "1. **Version**: \`${{ steps.version.outputs.version }}\` would be published"
          echo "2. **Package**: \`@axeptio/react-native-sdk\`"
          echo "3. **Registry**: npmjs.org (public)"
          echo ""
          
          CURRENT=$(node -p "require('./package.json').version")
          if [[ "$CURRENT" != "${{ steps.version.outputs.version }}" ]]; then
            echo "4. **package.json**: Would be updated from $CURRENT to ${{ steps.version.outputs.version }}"
            echo "5. **Git commit**: Would create commit with message: \`chore: release v${{ steps.version.outputs.version }} [skip ci]\`"
            echo "6. **Git tag**: Would create tag \`v${{ steps.version.outputs.version }}\`"
          else
            echo "4. **package.json**: Already at correct version ‚úÖ"
          fi
          
          echo ""
          echo "### Next steps:"
          echo "- If everything looks good, create a GitHub release with tag \`v${{ steps.version.outputs.version }}\`"
          echo "- Or run the publish workflow manually from Actions tab"
          echo ""
          echo "‚úÖ **Dry run successful** - Ready to release!"

      - name: Failed summary
        if: failure()
        run: |
          echo "## ‚ùå Dry Run Failed"
          echo ""
          echo "The release dry run failed. Please check the errors above."
          echo ""
          echo "Common issues:"
          echo "- Version already exists on npm (bump version number)"
          echo "- Build errors (fix code issues)"
          echo "- Missing NPM_TOKEN secret (check repository settings)"
          echo ""
          echo "Fix the issues and run the dry run again."